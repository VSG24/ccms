<?php
/**
 * Created by PhpStorm.
 * User: vahid
 * Date: 7/26/15
 * Time: 2:44 PM
 */

    function redirectTo( $location = NULL )
    {
        if( $location != NULL )
        {
            header("Location: {$location}");
            exit;
        }
    }

    function isIncluded($filename)
    {
        $f = get_included_files();
        if (in_array($filename, $f))
            return true;
        else
            return false;
    }

    function passwordHash($password)
    {
        $hash = password_hash($password, PASSWORD_DEFAULT);
        return $hash;
    }

    function passwordVerify($password, $hash)
    {
        $stat = password_verify($password, $hash);
        return $stat ? true : false;
    }

    function hashedPasswordVerify($hashed_input, $hashed_password)
    {
        if($hashed_input === $hashed_password)
            return true;
        else
            return false;
    }

    // Database based

    function dbQueryCheck($res, $conn)
    {
        if(!$res)
        {
            die('Mysql Query failed: ' . $conn->error);
        }
        else return true;
    }

    function echoResultInSelect($row, $fieldname)
    {
        echo '<option value="' . $row[$fieldname] . '">' . $row[$fieldname] . '</option>';
    }

    function dateToJalali($date, $sep = '/', $convert = null)
    {
        $datetime = strtotime($date);
        $year = date('Y', $datetime);
        $month = date('m', $datetime);
        $day = date('d', $datetime);

        $jdate = gregorian_to_jalali($year,$month,$day); // uses jdf.php functions

        if(isset($convert) && $convert != false)
        {
            $farsi_array   = array('۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹');
            $english_array = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9');
            $jdate = str_replace($english_array, $farsi_array, $jdate);
        }

        return $jdate[0] . $sep . $jdate[1] . $sep . $jdate[2];
    }

    function dateToGreg($date, $sep = '/', $american = null)
    {
        $datetime = strtotime($date);
        $year = date('Y', $datetime);
        $month = date('m', $datetime);
        $day = date('d', $datetime);

        if(isset($american) && $american != false) // second parameter determines whether or not date should be in american format
        {
            return $month . $sep . $day . $sep . $year;
        }

        return $year . $sep . $month . $sep. $day;
        //return $day . $sep . $month . $sep . $year;
    }

    function dateToGregDB($date) // W3C style
    {
        $datetime = explode('-', $date);

        $year = $datetime[0];
        $month = $datetime[1];
        $day = $datetime[2];

        $gdate = jalali_to_gregorian($year,$month,$day);

        return $gdate[0] . '-' . $gdate[1] . '-' . $gdate[2];
    }

    function isEnglish()
    {
        if(Language == 'en') return true;
        else return false;
    }

    function getLanguage()
    {
        return Language;
    }

    function LBDP($row)
    {
        if($row == null || $row == '0000-00-00 00:00:00')
        {
            return '-';
        }
        if(isEnglish())
        {
            return dateToGreg($row, '/', false);
        }
        else
        {
            return dateToJalali($row, '/', !isEnglish());
        }
    }

    function addZeros($a)
    {
        $zero = '0';

        if($a[4] == '-' && $a[6] == '-')
        {
            $a = implode($zero,str_split($a,5));
            if($a[7] == '-' && $a[9] == '')
            {
                $a = implode($zero,str_split($a,8));
            }
        }
        else
        {
            if($a[7] == '-' && $a[9] == '')
            {
                $a = implode($zero,str_split($a,8));
            }
        }

        return $a;
    }

    function addZerosToShow($a, $eng = false) // add missing zeros to date. useful for persian dates generated by jdf functions
    {
        if($a != '-')
        {
            /*if(Language == 'en')
        {
            $zero = '0';
            if($a[4] == '/' && $a[6] == '/')
            {
                $a = implode($zero,str_split($a,5));
                if($a[7] == '/' && $a[9] == '')
                {
                    $a = implode($zero,str_split($a,8));
                }
            }
            else
            {
                if($a[7] == '/' && $a[9] == '')
                {
                    $a = implode($zero,str_split($a,8));
                }
            }
        }
        else*/if(Language == 'fa')
        {
            $zero = '۰';
            if($eng) $zero = '0';
            if(mb_substr($a, 6, 1, 'utf-8') == '/' && mb_substr($a, 6, 1, 'utf-8') == '/')
            {
                $a = mb_substr($a, 0, 5, 'utf-8') . $zero . mb_substr($a, 5, 4, 'utf-8');
                if(mb_substr($a, 9, 1, 'utf-8') == '')
                {
                    $a = mb_substr($a, 0, 8, 'utf-8') . $zero . mb_substr($a, 8, 4, 'utf-8');
                }
            }
            else
            {
                if(mb_substr($a, 9, 1, 'utf-8') == '')
                {
                    $a = mb_substr($a, 0, 8, 'utf-8') . $zero . mb_substr($a, 8, 4, 'utf-8');
                }
            }
        }
        }

        return $a;
    }

    // this version looks for dashes instead of slashes
    function addZerosToShow_dash($a, $eng = false) // add missing zeros to date. useful for persian dates generated by jdf functions
    {
        if($a != '-')
        {
            if(Language == 'fa')
            {
                $zero = '۰';
                if($eng) $zero = '0';
                if(mb_substr($a, 6, 1, 'utf-8') == '-' && mb_substr($a, 6, 1, 'utf-8') == '-')
                {
                    $a = mb_substr($a, 0, 5, 'utf-8') . $zero . mb_substr($a, 5, 4, 'utf-8');
                    if(mb_substr($a, 9, 1, 'utf-8') == '')
                    {
                        $a = mb_substr($a, 0, 8, 'utf-8') . $zero . mb_substr($a, 8, 4, 'utf-8');
                    }
                }
                else
                {
                    if(mb_substr($a, 9, 1, 'utf-8') == '')
                    {
                        $a = mb_substr($a, 0, 8, 'utf-8') . $zero . mb_substr($a, 8, 4, 'utf-8');
                    }
                }
            }
        }

        return $a;
    }

    function timeToUTC($date)
    {
        $dateToFormat = strtotime($date);
        return gmdate('Y-m-d H:i:s', $dateToFormat);
    }

    // Form validation

    function test_input($data, $conn = null)
    {
        $data = trim($data);
        $data = stripslashes($data);
        $data = htmlspecialchars($data);
        if(isset($conn))
        {
            $data = $conn->real_escape_string($data); // escaping single quotes
        }
        else
        {
            $data = escapeSingleQuotes($data);
        }
        return $data;
    }

    function validateUserName($username, $conn = null)
    {
        $username = test_input($username, $conn);
        if(isset($username) && !empty($username))
        {
            $count = strlen($username);
            if($count<5) return false;
            else return true;
        }
        else
        {
            return false;
        }
    }

    function validatePassword($password, $conn = null)
    {
        $password = test_input($password, $conn);
        if(isset($password) && !empty($password))
        {
            $count = strlen($password);
            if($count<6) return false;
            else return true;
        }
        else
        {
            return false;
        }
    }

    function getCurrentUser($succ_ret = 'id')
    {
        if(Users::getUsernameBySeassion() !== false)
        {
            $data = ['id' => Users::getIDBySeassion(), 'username' => Users::getUsernameBySeassion()];
            if($succ_ret == 'id') return $data['id'];
            elseif($succ_ret == 'username') return $data['username'];
        }
        return '';
    }

    /*function getDefaultUser()
    {
        $query = "SELECT option_value FROM c_options WHERE option_name = 'default_user' LIMIT 1";
        $conn = MySQL::open_conn();
        $res = $conn->query($query)->fetch_assoc()['option_value'];
        return $res;
    }*/

    function verifyUser($username, $password)
    {
        $username = test_input($username);
        $password = test_input($password);

        $conn = MySQL::open_conn();
        $query = "SELECT * FROM c_users WHERE user_login = '$username' LIMIT 1";
        $res = $conn->query($query);

        dbQueryCheck($res, $conn);
        $row = $res->fetch_assoc();

        $hpassword = $row['user_pass'];

        $res->free();
        $conn->close();

        $stat = passwordVerify($password, $hpassword);

        if($stat)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    function getVisitorIP()
    {
        if(isset($_SERVER["HTTP_CF_CONNECTING_IP"])) // check if cloudflare is sending it's headers
        {
            $_SERVER['REMOTE_ADDR'] = $_SERVER["HTTP_CF_CONNECTING_IP"];
            return $_SERVER['REMOTE_ADDR'];
        }
        return $_SERVER['REMOTE_ADDR'];
    }

    // returns country code when CloudFlare is on, returns null otherwise
    function getVisitorCountryCodeCF()
    {
        if(isset($_SERVER["HTTP_CF_IPCOUNTRY"]))
            return $_SERVER["HTTP_CF_IPCOUNTRY"];
        else
            return null;
    }

    function verifyLoginNonce($user_id, $token)
    {
        $conn = MySQL::open_conn();

        $query = "SELECT * FROM c_nonce WHERE user_id = $user_id";
        $res = $conn->query($query);

        if($res->num_rows <= 0)
        {
            return false;
        }
        else
        {
            while($row = $res->fetch_assoc())
            {
                $token_nonce = $row['token'];
                $expire_nonce = $row['expire_date'];
                $ip_nonce = $row['user_ip'];

                $curr_time = time();
                $user_ip = getVisitorIP();
                if(($token_nonce == $token) && ($ip_nonce == $user_ip)) // check if both token and ip are in the database
                {
                    if($expire_nonce > $curr_time) // check if nonce isn't expired yet
                    {
                        return true;
                    }
                    else
                    {
                        removeNonce($row['ID']); // check for return value?!
                        return false;
                    }
                }
                else
                {
                    removeNonce($row['ID']);
                }
            }
            return false;
        }
    }

    function removeNonce($nonce_id)
    {
        $conn = MySQL::open_conn();
        $query = "DELETE FROM c_nonce WHERE ID = $nonce_id";
        $res = $conn->query($query);

        if($res)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    function formErrorSet($arg1 = 'Username', $arg2 = 'Password')
    {
        //$_SESSION['form_error'] = '<br><br><p>' . 'Something wrong with ' . $arg1 . '/' . $arg2 . '.' . '</p>';
        $_SESSION['form_error'] = '<br><br><div class="alert alert-danger"><a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                <strong>Failed!</strong> Please <span style="cursor: pointer;" onclick="redirect();"><strong>Go Back</strong></span> and try again.
                </div>';
    }

    function formErrorDisplay($error = '')
    {
        if(isset($_SESSION['form_error']))
        {
            echo $_SESSION['form_error'];
        }
    }

    function formErrorReset()
    {
        $_SESSION['form_error']=null;
    }

    function getCategoryCount()
    {
        $conn = MySQL::open_conn();
        $query = "SELECT * FROM c_categories";
        $res = $conn->query($query);
        return $res->num_rows;
    }

    function getCommentsCount()
    {
        $conn = MySQL::open_conn();
        $query = "SELECT * FROM c_comments";
        $res = $conn->query($query);
        return $res->num_rows;
    }

    function getPostShareByCategory($id_or_name = false) // gets the number of posts and pages in each category, returns an array with keys as id of category and value as number of posts
    {
        $conn = MySQL::open_conn();
        $query = "SELECT cat_id FROM c_posts_cats";
        $res = $conn->query($query);
        dbQueryCheck($res, $conn);

        $query2 = "SELECT MAX(ID) AS 'maxid', MIN(ID) AS 'minid' FROM c_categories";
        $res2 = $conn->query($query2);
        $row2 = $res2->fetch_assoc();
        $maxid = $row2['maxid'];
        $minid = $row2['minid'];

        $cats = [];

        while($row = $res->fetch_assoc())
        {
            for($i = $minid; $i <= $maxid; $i++)
            {
                if($i == $row['cat_id'])
                {
                    $cats[$i]++;
                    break;
                }
            }
        }
        if($id_or_name == false)
        {
            return $cats;
        }
        else
        {
            foreach($cats as $i => $v)
            {
                $n = getCategoryById($i);
                $cat_names[$n] = $v;
            }
            return $cat_names;
        }
    }

    function getCategoryByName($cat_name)
    {
        $name = $cat_name;
        $conn = MySQL::open_conn();
        $query = "SELECT ID FROM c_categories WHERE name = '$name'";
        $res = $conn->query($query);
        dbQueryCheck($res, $conn);
        $row = $res->fetch_assoc();
        $conn->close();
        return $row['ID'];
    }

    function getCategoryById($cat_id)
    {
        $id = $cat_id;
        $conn = MySQL::open_conn();
        $query = "SELECT name FROM c_categories WHERE ID = $id";
        $res = $conn->query($query);
        dbQueryCheck($res, $conn);
        $row = $res->fetch_assoc();
        $conn->close();
        return $row['name'];
    }

    function getCategoryLinkNameById($cat_id)
    {
        $id = $cat_id;
        $conn = MySQL::open_conn();
        $query = "SELECT link_name FROM c_categories WHERE ID = $id";
        $res = $conn->query($query);
        dbQueryCheck($res, $conn);
        $row = $res->fetch_assoc();
        $conn->close();
        return $row['link_name'];
    }

    function getCategoryPostCountById($cat_id)
    {
        $id = $cat_id;
        $query = "SELECT ID FROM c_posts_cats WHERE cat_id = $id";
        $conn = MySQL::open_conn();
        $res = $conn->query($query);
        $conn->close();
        return $res->num_rows;
    }

    function getDefaultCategory()
    {
        $conn = MySQL::open_conn();
        $query = "SELECT option_value FROM c_options WHERE option_name = 'default_category' LIMIT 1";
        $res = $conn->query($query);
        $def_cat = $res->fetch_row()[0];
        $conn->close();
        return $def_cat; // return id of default category
    }

    function getPostCategories($post_id)
    {
        $conn = MySQL::open_conn();
        $query = "SELECT cat_id FROM c_posts_cats WHERE post_id = $post_id";
        $res = $conn->query($query);
        $conn->close();
        if(!$res)
        {
            goTo404();
        }
        return $res->fetch_row();
    }

    function getPostCategoriesCount($post_id)
    {
        $conn = MySQL::open_conn();
        $query = "SELECT cat_id FROM c_posts_cats WHERE post_id = $post_id";
        $res = $conn->query($query);
        $conn->close();
        return $res->num_rows;
    }

    function goTo404()
    {
        ob_end_clean();
        redirectTo(SITE_DOMAIN . '/404.php');
    }

    function getError($i, $text, $back = false)
    {
        if(isset($i) && $i)
        {
            if($back) $j = '#222'; else $j = '#fff';
            echo "<div align='center' style='padding: 5px; background-color: " . $j . ";'><p style='color: red; font-family: \"Open Sans\", sans-serif;'>" . $text . "</p></div>";
        }
    }

    function is_front_page()
    {
        if(URI::checkPage() == 'Home')
            return true;
        else
            return false;
    }

    function getSiteTitle()
    {
        $query = "SELECT option_value FROM c_options WHERE option_name = 'site_title'";
        $conn = MySQL::open_conn();
        $res = $conn->query($query)->fetch_assoc();
        $conn->close();
        return $res['option_value'];
    }

    function getSiteDescription()
    {
        $query = "SELECT option_value FROM c_options WHERE option_name = 'site_description'";
        $conn = MySQL::open_conn();
        $res = $conn->query($query)->fetch_assoc();
        $conn->close();
        return $res['option_value'];
    }

    function escapeSingleQuotes($str)
    {
        return str_replace("'", "\\'", $str);
    }

    function inSubDir()
    {
        if(SUBDIR == '' || count(SUBDIR) == 0)
            return false;
        else
            return true;
    }

    function getSUBDIRPiecesCount()
    {
        $params = explode('/', SUBDIR);
        return count($params)-1;
    }

    function getVersion()
    {
        $conn = MySQL::open_conn();
        $query = "SELECT option_value FROM c_options WHERE option_name = 'version'";
        $res = $conn->query($query);
        $conn->close();
        return $res->fetch_row()[0];
    }

    function getInstallationDate()
    {
        $conn = MySQL::open_conn();
        $query = "SELECT option_value FROM c_options WHERE option_name = 'installation_date'";
        $res = $conn->query($query);
        $conn->close();
        return $res->fetch_row()[0];
    }

    function getReleaseDate()
    {
        $conn = MySQL::open_conn();
        $query = "SELECT option_value FROM c_options WHERE option_name = 'release_date'";
        $res = $conn->query($query);
        $conn->close();
        return $res->fetch_row()[0];
    }

    function checkForUpdate()
    {
        $version = getVersion();
        $url = "http://ccms.vahida.ir/update.csv";

        $host = 'ccms.vahida.ir';
        if (pingServer($host) == 0)
        {
            if($fp = @fopen ($url, 'r'))
            {
                $read = fgetcsv($fp);
                fclose($fp);

                if (($read[0] - $version) > 0)
                {
                    $_SESSION['stat_desc'] = $read[1];
                    $_SESSION['stat_version'] = $read[0];
                    $_SESSION['stat_link'] = $read[3];
                    $_SESSION['stat_date'] = $read[4];

                    if($read[2] == 'r')
                    {
                        $_SESSION['update_check'] = 1; // regular update
                    }
                    elseif($read[2] == 'c')
                    {
                        $_SESSION['update_check'] = 2; // critical update
                    }
                    return $read; // update available
                }
                else
                {
                    $_SESSION['update_check'] = -1;
                    return -1; // no update
                }
            }
        }
        else
        {
            $_SESSION['update_server_down'] = 1;
            return -1;
        }
    }

    // doesn't work on shared hosts where exec function is disabled
    /*function pingServer($host)
    {
        exec("ping -c 4 " . $host, $output, $result);
        return $result;
    }*/

    // simulate a ping by using curl
    function pingServer($host)
    {
        $ch = curl_init($host);
        curl_setopt($ch, CURLOPT_TIMEOUT, 5);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $data = curl_exec($ch);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        if($httpcode>=200 && $httpcode<300)
        {
            return 0;
        }
        else
        {
            return -1;
        }
    }

    function isUpdateAvailable()
    {
        if(isset($_SESSION['update_check']))
        {
            if($_SESSION['update_check'] != 0 || $_SESSION['update_check'] != false)
            {
                if($_SESSION['update_check'] == 1)
                {
                    return 1;
                }
                elseif($_SESSION['update_check'] == 2)
                {
                    return 2;
                }
            }
        }
        else
        {
            if(checkForUpdate() != -1)
            {
                isUpdateAvailable();
            }
        }
    }

    function do_post_request($url, $postdata)
    {
        $content = "";

        // Add post data to request.
        foreach($postdata as $key => $value)
        {
            $content .= "{$key}={$value}&";
        }

        $params = array('http' => array(
            'method' => 'POST',
            'header' => 'Content-Type: application/x-www-form-urlencoded',
            'content' => $content
        ));

        $ctx = stream_context_create($params);
        $fp = fopen($url, 'rb', false, $ctx);

        if (!$fp) {
            throw new Exception("Connection problem, {$php_errormsg}");
        }

        $response = @stream_get_contents($fp);
        if ($response === false) {
            throw new Exception("Response error, {$php_errormsg}");
        }

        return $response;
    }

    function goToError($from, $error_txt, $error_page = '?switch=error')
    {
        ob_end_clean();
        $_SESSION['from'] = $from;
        $_SESSION['error'] = $error_txt;
        redirectTo($error_page);
    }

    function getErrorPlus()
    {
        $original_page = $_SESSION['from'];
        $error_txt = $_SESSION['error'];
        $error = _e('error', '', '', true);
        $return = _e('return', '', '', true);
        echo "<div align=\"center\"><h3 style='color: red'>$error</h3><br><span>$error_txt</span><hr>";
        echo "<a class='btn btn-warning' href='$original_page'>$return</a></div>";
    }

    function shouldConfMail()
    {
        $query = "SELECT option_value FROM c_options WHERE option_name = 'send_conf_mail'";
        $conn = MySQL::open_conn();
        $res = $conn->query($query)->fetch_assoc();
        $conn->close();
        if($res['option_value'] == 'yes')
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    function replace_template($input, $vars)
    {
        $output = strtr($input, $vars);
        return $output;
    }

    function getConfEmailTemplateVars($user_id)
    {
        $user = Users::getUserById($user_id);
        $values = ['{username}'=>$user['username'], '{email}'=>$user['user_email'], '{site_title}'=>getSiteTitle(), '{site_url}'=>SITE_DOMAIN, '{activate}'=>$user['activate']];
        return $values;
    }

    function getDefaultEmailTemplate()
    {
        $conn = MySQL::open_conn();
        $query = "SELECT option_value FROM c_options WHERE option_name = 'default_email_template' LIMIT 1";
        $res = $conn->query($query);
        $def_cat = $res->fetch_row()[0];
        return $def_cat; // return id of default template
    }

    function getDefaultEmailTemplateContent()
    {
        $def_temp = getDefaultEmailTemplate();
        $conn = MySQL::open_conn();
        $query = "SELECT template_html FROM c_emails WHERE ID = $def_temp LIMIT 1";
        $res = $conn->query($query);
        $def_cat = $res->fetch_row()[0];
        return $def_cat; // return html version of default email template
    }

    function commentFormCheck($comment_stat)
    {
        if($comment_stat == 1)
        {
            $conn = MySQL::open_conn();
            $query = "SELECT option_value FROM c_options WHERE option_name = 'can_comment' LIMIT 1";
            $res = $conn->query($query)->fetch_assoc();
            if($res['option_value'] == 'anyone')
            {
                return 1; // anyone can comment
            }
            else
            {
                return 2; // only users can comment
            }
        }
        else
        {
            return -1; // comments are closed
        }
    }

    function doCache()
    {
        if(shouldCache())
        {
            include_once DOC_ROOT . '/includes/cache.php';
        }
    }

    function generatePostsSitemap()
    {
        $sitemap = new Sitemap(SITE_DOMAIN);
        $sitemap->setPath(DOC_ROOT . '/');
        $sitemap->setFilename('post');
        $posts = new Posts();

        $sitemap->addItem('', '1.0', 'daily', 'Today');
        while($row = $posts->getPostsLoop(null, 'post'))
        {
            $sitemap->addItem($posts->getPostPermLink($row['ID'], $row['post_type'], $row['link_title']), '0.6', 'weekly', $row['post_date']);
        }
        $sitemap->createSitemapIndex(SITE_DOMAIN, 'Today');
    }

    function generatePagesSitemap()
    {
        $sitemap = new Sitemap(SITE_DOMAIN);
        $sitemap->setPath(DOC_ROOT . '/');
        $sitemap->setFilename('page');
        $posts = new Posts();

        $sitemap->addItem('', '1.0', 'daily', 'Today');
        while($row = $posts->getPostsLoop(null, 'page'))
        {
            $sitemap->addItem($posts->getPostPermLink($row['ID'], $row['post_type'], $row['link_title']), '0.8', 'weekly', $row['post_date']);
        }
        $sitemap->createSitemapIndex(SITE_DOMAIN, 'Today');
    }

    function autoXMLMapsUpdate()
    {
        $query = "SELECT option_value FROM c_options WHERE option_name = 'xml_maps_auto_update' LIMIT 1";
        $conn = MySQL::open_conn();
        $xml_auto_update = $conn->query($query)->fetch_row()[0];
        if($xml_auto_update == 'yes')
        {
            return true;
        }
        else
            return false;
    }

    function getConfMailSubject()
    {
        $conn = MySQL::open_conn();
        $query = "SELECT option_value FROM c_options WHERE option_name = 'conf_mail_subject'";
        $res = $conn->query($query);
        $conn->close();
        return $res->fetch_row()[0];
    }

    function registerUsers()
    {
        $conn = MySQL::open_conn();
        $query = "SELECT option_value FROM c_options WHERE option_name = 'register_open'";
        $res = $conn->query($query);
        $conn->close();
        $row = $res->fetch_row()[0];
        if($row == 'yes') return true;
        else return false;
    }

    function shouldCache()
    {
        $query = "SELECT option_value FROM c_options WHERE option_name = 'caching' LIMIT 1";
        $conn = MySQL::open_conn();
        $res = $conn->query($query)->fetch_row();
        if($res[0] == 'yes')
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    // jDateTime::date('Y-m-d', false, false); for jalali
    // $date = new DateTime('now'); $date->format('Y-m-d'); for gregorian
    function englishConvertDate($date = null)
    {
        if(!isset($date))
        {
            $date = time();
        }
        else
        {
            $date = strtotime($date);
        }
        $date = date('F d, Y', $date);
        return $date;
    }

    function iranianConvertDate($date = null, $persian = false)
    {
        if(!isset($date))
        {
            $date = time();
        }
        else
        {
            $date = strtotime($date);
        }
        if(!$persian)
        {
            $date = jdate('j F Y', $date, null, null, 'en'); // must be placed inside <span dir="ltr"></span> if didn't work try dir="rtl"
        }
        else
        {
            $date = jdate('j F Y', $date); // must be placed inside <span dir="ltr"></span>
        }
        return $date;
    }

    function getTodayVisitorsCount()
    {
        $conn = MySQL::open_conn();
        $query = "SELECT date_time FROM c_user_stats";
        $res = $conn->query($query);
        $i = 0;
        while($row = $res->fetch_row())
        {
            $visited_date = date('Ymd', strtotime($row[0]));
            $today = date('Ymd');
            if($today == $visited_date)
            {
                $i++;
            }
        }
        return $i;
    }

    function clearAllCache()
    {
        @array_map('unlink', glob(DOC_ROOT . '/tmp/*'));
    }